module ut_refi
    use pfunit_mod
    use unittest_environment
    
contains

    @before 
    subroutine do_at_start()
        implicit none
        call ut_init()

        call create_block(4,4,cells,pnts,nCells,nPnts)

        call init_sol(cells,parentCells,pnts,faces,nCells,nParentCells,nFace)
        write(*,*) "Hey Ho Lets go!"
    end subroutine do_at_start

    @after 
    subroutine do_at_end()
        implicit none
        write(*,*) "Aus und vorbei"
        call ut_cleanup()
    end subroutine do_at_end

    @test
    subroutine test_prerequisits()
        integer                             :: i
        i = nCells % nEntry
        @assertEqual( 9, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual(16, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 9, i, message="Number Of ParentCells") 
    end subroutine test_prerequisits

    @test
    subroutine test_refinement_1()
        integer                             :: i
        nRefine   = 1
        nDoCoarse = 0
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 12, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 21, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 13, i, message="Number Of ParentCells") 
        call write_sol(cells,pnts,nCells,nPnts,"sol_1.dat")
    end subroutine test_refinement_1

    @test
    subroutine test_refinement_2()
        integer                             :: i
        nRefine   = 1
        nDoCoarse = 0
        i = 4
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 15, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 25, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 17, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_2.dat")
    end subroutine test_refinement_2

    @test
    subroutine test_refinement_3()
        integer                             :: i
        nRefine   = 1
        nDoCoarse = 0
        i = 6
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 15, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 25, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 17, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_3.dat")
    end subroutine test_refinement_3

    @test
    subroutine test_refinement_4()
        integer                             :: i
        nRefine   = 1
        nDoCoarse = 0
        i = 2
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 15, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 25, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 17, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_4.dat")
    end subroutine test_refinement_4

    @test
    subroutine test_refinement_5()
        integer                             :: i
        nRefine   = 1
        nDoCoarse = 0
        i = 8
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 15, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 25, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 17, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_5.dat")
    end subroutine test_refinement_5

    @test
    subroutine test_refinement_6()
        integer                             :: i
        nRefine   = 0
        nDoCoarse = 0
        i = 1; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 3; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 7; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 9; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        nRefine   = 1
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 24, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 41, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 29, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_6.dat")
    end subroutine test_refinement_6

    @test
    subroutine test_refinement_7()
        integer                             :: i
        nRefine   = 0
        nDoCoarse = 0
        i = 2; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 4; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 6; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 8; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        nRefine   = 1
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 24, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 37, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 29, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_7.dat")
    end subroutine test_refinement_7

    @test
    subroutine test_refinement_8()
        integer                             :: i
        nRefine   = 0
        nDoCoarse = 0
        i = 1; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 2; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 3; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 4; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 6; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 7; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 8; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3
        i = 9; nRefine=nRefine+1; refineList(nRefine) = i; refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)
        nRefine   = 1
        i = 5
        refineList(nRefine) = i
        refineType(i) = 3

        call doRefinement (cells,parentCells,pnts,faces                      &
                          ,nCells,nParentCells,nPnts,nFace                   &
                          ,refineType,refineList,nRefine                     &
                          ,canCoarseList,nCanCoarse                          &
                          ,doCoarseList,nDoCoarse                            &
                          ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 36, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 49, i, message="Number Of Points") 
        i = nParentCells % nEntry
        @assertEqual( 9+9*4, i, message="Number Of ParentCells") 

        call write_sol(cells,pnts,nCells,nPnts,"sol_8.dat")
    end subroutine test_refinement_8

end module ut_refi
