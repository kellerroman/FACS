module ut_refic
    use pfunit
    use unittest_environment
    
contains

    @before 
    subroutine do_at_start()
        implicit none
        call ut_init()

        call create_block(4,4,cells,pnts,nCells,nPnts)

        call init_sol(cells,parentCells,pnts,faces,nCells,nParentCells,nFace)
        write(*,*) "Hey Ho Lets go!"
    end subroutine do_at_start

    @after 
    subroutine do_at_end()
        implicit none
        write(*,*) "Aus und vorbei"
        call ut_cleanup()
    end subroutine do_at_end

    @test
    subroutine test_refinement_once()
        integer                             :: i,j
        nRefine   = 0
        nDoCoarse = 0
        do i = 1, nCells % nEntry ,2
            nRefine       = nRefine + 1
            refineList(nRefine) = i
            refineType(i) = 3
        end do

        @assertEqual(5,nRefine,message="Number of Cells to Refine")

        !call smooth_refinement(cells,refineType,refineList,nRefine)

        call doRefinement (cells,parentCells,pnts,faces                      &
                        ,nCells,nParentCells,nPnts,nFace                   &
                        ,refineType,refineList,nRefine                     &
                        ,canCoarseList,nCanCoarse                          &
                        ,doCoarseList,nDoCoarse                            &
                        ,.false.)

        call check_points(pnts,nPnts,cells,nCells)
        call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        i = nCells % nEntry
        @assertEqual( 24, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 41, i, message="Number Of Points") 
        call write_sol(cells,pnts,nCells,nPnts,"sol.dat")
    end subroutine test_refinement_once

    @test
    subroutine test_refinement_twice()
        implicit none
        integer                             :: i,j
        do j = 1,2
            nRefine   = 0
            nDoCoarse = 0
            if ( j == 1 ) then
                do i = 1, nCells % nEntry ,2
                    nRefine       = nRefine + 1
                    refineList(nRefine) = i
                    refineType(i) = 3
                end do
            else 
                nRefine       = nRefine + 1
                i = 1
                refineList(nRefine) = i
                refineType(i) = 3
            end if

            call smooth_refinement(cells,refineType,refineList,nRefine)

            if ( j == 2 ) then
                @assertEqual(2,nRefine,message="Number of Cells to Refine")
            end if
            call doRefinement (cells,parentCells,pnts,faces                      &
                            ,nCells,nParentCells,nPnts,nFace                   &
                            ,refineType,refineList,nRefine                     &
                            ,canCoarseList,nCanCoarse                          &
                            ,doCoarseList,nDoCoarse                            &
                            ,.false.)

            call check_points(pnts,nPnts,cells,nCells)
            call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        end do
        i = nCells % nEntry
        @assertEqual( 30, i, message="Number Of Cells") 
        i = nPnts % nEntry
        @assertEqual( 48, i, message="Number Of Points") 
    end subroutine test_refinement_twice

    @test
    subroutine test_refinement_multi()
        integer                             :: i,j
        write(*,'(90("="))') 
        write(*,*) "TESTCASE MULTI"
        write(*,'(90("="))') 
        do j = 1,3
            !write(*,'(90("="))') 
            write(*,*) "ROUND",j
            nRefine   = 0
            nDoCoarse = 0
            do i = 1, nCells % nEntry ,j
                nRefine       = nRefine + 1
                refineList(nRefine) = i
                refineType(i) = 3
            end do

            write(*,*) "nRefine", nRefine

            call smooth_refinement(cells,refineType,refineList,nRefine)

            call doRefinement (cells,parentCells,pnts,faces                      &
                              ,nCells,nParentCells,nPnts,nFace                   &
                              ,refineType,refineList,nRefine                     &
                              ,canCoarseList,nCanCoarse                          &
                              ,doCoarseList,nDoCoarse                            &
                              ,.false.)

            call check_points(pnts,nPnts,cells,nCells)
            call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        end do

        call write_sol(cells,pnts,nCells,nPnts,"sol.dat") 

    end subroutine test_refinement_multi

    @test
    subroutine test_refinement_coarse()
        integer                             :: i,j
        character(len=100) :: filename
        do j = 1,4
            nRefine   = 0
            nDoCoarse = 0
            if (mod(j,2) == 1) then
                do i = 1, nCells % nEntry ,2
                    nRefine       = nRefine + 1
                    refineList(nRefine) = i
                    refineType(i) = 3
                end do
            else
                do i = 1, nCanCoarse
                    nDoCoarse = nDoCoarse + 1
                    doCoarseList(nDoCoarse) = canCoarseList(i)
                end do
            end if

            call smooth_refinement(cells,refineType,refineList,nRefine)

            call doRefinement (cells,parentCells,pnts,faces                    &
                            ,nCells,nParentCells,nPnts,nFace                   &
                            ,refineType,refineList,nRefine                     &
                            ,canCoarseList,nCanCoarse                          &
                            ,doCoarseList,nDoCoarse                            &
                            ,.false.)

            write(filename,'(A,I3.3,A)') "sol_coarse_",j,".dat"
            call write_sol(cells,pnts,nCells,nPnts,filename)
            call check_points(pnts,nPnts,cells,nCells)
            call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        end do
    end subroutine test_refinement_coarse

    @test
    subroutine test_refinement_coarse_ramp()
        integer                             :: i,j
        character(len=100) :: filename
        integer, parameter :: RAMP = 4
        do j = 1,2*RAMP
            nRefine   = 0
            nDoCoarse = 0
            if (j <= RAMP) then
                do i = 1, nCells % nEntry ,2
                    nRefine       = nRefine + 1
                    refineList(nRefine) = i
                    refineType(i) = 3
                end do
            else
                do i = 1, nCanCoarse
                    nDoCoarse = nDoCoarse + 1
                    doCoarseList(nDoCoarse) = canCoarseList(i)
                end do
            end if

            call smooth_refinement(cells,refineType,refineList,nRefine)

            call doRefinement (cells,parentCells,pnts,faces                    &
                            ,nCells,nParentCells,nPnts,nFace                   &
                            ,refineType,refineList,nRefine                     &
                            ,canCoarseList,nCanCoarse                          &
                            ,doCoarseList,nDoCoarse                            &
                            ,.false.)

            write(filename,'(A,I3.3,A)') "sol_coarse_ramp_",j,".dat"
            call write_sol(cells,pnts,nCells,nPnts,filename)
            call check_points(pnts,nPnts,cells,nCells)
            call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        end do
    end subroutine test_refinement_coarse_ramp

    @test
    subroutine test_refinement_coarse_problem()
        integer                             :: i,j
        character(len=100) :: filename
        do j = 1,3
            nRefine   = 0
            nDoCoarse = 0
            if (j == 1) then
                i = 1; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 4; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
            else if (j == 2) then
                i = 5; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 7; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 4; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 13; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 14; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
                i = 15; nRefine=nRefine+1;refineList(nRefine)=i;refineType(i)=3
            else
                do i = 1, nCanCoarse
                    nDoCoarse = nDoCoarse + 1
                    doCoarseList(nDoCoarse) = canCoarseList(i)
                end do
                write(*,*) canCoarseList(1:nCanCoarse)
            end if

            call doRefinement (cells,parentCells,pnts,faces                    &
                            ,nCells,nParentCells,nPnts,nFace                   &
                            ,refineType,refineList,nRefine                     &
                            ,canCoarseList,nCanCoarse                          &
                            ,doCoarseList,nDoCoarse                            &
                            ,.false.)

            write(filename,'(A,I3.3,A)') "sol_coarse_prob_",j,".dat"
            call write_sol(cells,pnts,nCells,nPnts,filename)
            call check_points(pnts,nPnts,cells,nCells)
            call check_neighbors(cells,nCells%nEntry,pnts,.false.)
        end do
    end subroutine test_refinement_coarse_problem
end module ut_refic
